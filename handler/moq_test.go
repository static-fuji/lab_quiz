// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package handler

import (
	"context"
	"github.com/static-fuji/lab_quiz/entity"
	"sync"
)

// Ensure, that ListWordsServiceMock does implement ListWordsService.
// If this is not the case, regenerate this file with moq.
var _ ListWordsService = &ListWordsServiceMock{}

// ListWordsServiceMock is a mock implementation of ListWordsService.
//
//	func TestSomethingThatUsesListWordsService(t *testing.T) {
//
//		// make and configure a mocked ListWordsService
//		mockedListWordsService := &ListWordsServiceMock{
//			ListWordsFunc: func(ctx context.Context) (entity.Words, error) {
//				panic("mock out the ListWords method")
//			},
//		}
//
//		// use mockedListWordsService in code that requires ListWordsService
//		// and then make assertions.
//
//	}
type ListWordsServiceMock struct {
	// ListWordsFunc mocks the ListWords method.
	ListWordsFunc func(ctx context.Context) (entity.Words, error)

	// calls tracks calls to the methods.
	calls struct {
		// ListWords holds details about calls to the ListWords method.
		ListWords []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockListWords sync.RWMutex
}

// ListWords calls ListWordsFunc.
func (mock *ListWordsServiceMock) ListWords(ctx context.Context) (entity.Words, error) {
	if mock.ListWordsFunc == nil {
		panic("ListWordsServiceMock.ListWordsFunc: method is nil but ListWordsService.ListWords was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockListWords.Lock()
	mock.calls.ListWords = append(mock.calls.ListWords, callInfo)
	mock.lockListWords.Unlock()
	return mock.ListWordsFunc(ctx)
}

// ListWordsCalls gets all the calls that were made to ListWords.
// Check the length with:
//
//	len(mockedListWordsService.ListWordsCalls())
func (mock *ListWordsServiceMock) ListWordsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockListWords.RLock()
	calls = mock.calls.ListWords
	mock.lockListWords.RUnlock()
	return calls
}

// Ensure, that AddWordServiceMock does implement AddWordService.
// If this is not the case, regenerate this file with moq.
var _ AddWordService = &AddWordServiceMock{}

// AddWordServiceMock is a mock implementation of AddWordService.
//
//	func TestSomethingThatUsesAddWordService(t *testing.T) {
//
//		// make and configure a mocked AddWordService
//		mockedAddWordService := &AddWordServiceMock{
//			AddWordFunc: func(ctx context.Context, title string) (*entity.Word, error) {
//				panic("mock out the AddWord method")
//			},
//		}
//
//		// use mockedAddWordService in code that requires AddWordService
//		// and then make assertions.
//
//	}
type AddWordServiceMock struct {
	// AddWordFunc mocks the AddWord method.
	AddWordFunc func(ctx context.Context, title string) (*entity.Word, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddWord holds details about calls to the AddWord method.
		AddWord []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Title is the title argument value.
			Title string
		}
	}
	lockAddWord sync.RWMutex
}

// AddWord calls AddWordFunc.
func (mock *AddWordServiceMock) AddWord(ctx context.Context, title string) (*entity.Word, error) {
	if mock.AddWordFunc == nil {
		panic("AddWordServiceMock.AddWordFunc: method is nil but AddWordService.AddWord was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Title string
	}{
		Ctx:   ctx,
		Title: title,
	}
	mock.lockAddWord.Lock()
	mock.calls.AddWord = append(mock.calls.AddWord, callInfo)
	mock.lockAddWord.Unlock()
	return mock.AddWordFunc(ctx, title)
}

// AddWordCalls gets all the calls that were made to AddWord.
// Check the length with:
//
//	len(mockedAddWordService.AddWordCalls())
func (mock *AddWordServiceMock) AddWordCalls() []struct {
	Ctx   context.Context
	Title string
} {
	var calls []struct {
		Ctx   context.Context
		Title string
	}
	mock.lockAddWord.RLock()
	calls = mock.calls.AddWord
	mock.lockAddWord.RUnlock()
	return calls
}
